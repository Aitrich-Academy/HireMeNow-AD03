// <auto-generated />
using System;
using Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250928202436_UpdateInterviewModel")]
    partial class UpdateInterviewModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CompanyUser", b =>
                {
                    b.Property<Guid>("CompanyUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyUserID");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyUserRole")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("JobProviderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobProviderID");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid>("SystemUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SystemUserID");

                    b.HasKey("CompanyUserId");

                    b.HasIndex("JobProviderId");

                    b.HasIndex("SystemUserId");

                    b.ToTable("CompanyUser", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Industry", b =>
                {
                    b.Property<Guid>("IndustryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("IndustryId");

                    b.ToTable("Industry", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Interview", b =>
                {
                    b.Property<Guid>("InterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("InterviewID");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationID");

                    b.Property<DateTime>("InterviewDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InterviewMode")
                        .HasColumnType("int");

                    b.Property<int>("InterviewStatus")
                        .HasColumnType("int");

                    b.Property<string>("InterviewTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("JobSeekerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobSeekerID");

                    b.Property<Guid>("ShortListId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InterviewId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Interview", (string)null);
                });

            modelBuilder.Entity("Domain.Models.JobApplication", b =>
                {
                    b.Property<Guid>("JobApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobApplicationID");

                    b.Property<int>("ApplicationStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("AppliedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobSeekerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobApplicationId");

                    b.HasIndex("JobPostId");

                    b.HasIndex("JobSeekerId");

                    b.HasIndex("ResumeId");

                    b.ToTable("JobApplication", (string)null);
                });

            modelBuilder.Entity("Domain.Models.JobPost", b =>
                {
                    b.Property<Guid>("JobPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobPostID");

                    b.Property<Guid>("IndustryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobProviderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobProviderId");

                    b.Property<string>("JobSummary")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("JobType")
                        .HasColumnType("int");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyUserID");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime");

                    b.HasKey("JobPostId");

                    b.HasIndex("JobProviderId");

                    b.HasIndex("PostedById");

                    b.ToTable("JobPost", (string)null);
                });

            modelBuilder.Entity("Domain.Models.JobSeeker", b =>
                {
                    b.Property<Guid>("JobSeekerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobSeekerID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobSeekerId");

                    b.ToTable("JobSeeker", (string)null);
                });

            modelBuilder.Entity("Domain.Models.JobSeekerProfile", b =>
                {
                    b.Property<Guid>("JobSeekerProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobSeekerProfileID");

                    b.Property<Guid>("JobSeekerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProfileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResumeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ResumeID");

                    b.HasKey("JobSeekerProfileId");

                    b.HasIndex("JobSeekerId");

                    b.HasIndex("ResumeId");

                    b.ToTable("JobSeekerProfile", (string)null);
                });

            modelBuilder.Entity("Domain.Models.JobSeekerProfileSkill", b =>
                {
                    b.Property<Guid>("JobSeekerProfileSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobSeekerProfileSkillID");

                    b.Property<Guid>("JobSeekerProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobSeekerProfileID");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobSeekerProfileSkillId");

                    b.HasIndex("JobSeekerProfileId");

                    b.HasIndex("SkillId");

                    b.ToTable("JobSeekerProfileSkill");
                });

            modelBuilder.Entity("Domain.Models.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("LocationId");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Qualification", b =>
                {
                    b.Property<Guid>("QualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("QualificationID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("JobseekerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("QualificationId");

                    b.HasIndex("JobseekerProfileId");

                    b.ToTable("Qualification", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Resume", b =>
                {
                    b.Property<Guid>("ResumeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ResumeID");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ResumeTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResumeId");

                    b.ToTable("Resume", (string)null);
                });

            modelBuilder.Entity("Domain.Models.SavedJob", b =>
                {
                    b.Property<Guid>("SavedJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SavedJobID");

                    b.Property<Guid>("JobPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobSeekerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobSeekerID");

                    b.Property<DateTime>("SavedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SavedJobId");

                    b.HasIndex("JobPostId");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("SavedJob", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ShortList", b =>
                {
                    b.Property<Guid>("ShortListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ShortListID");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApplicationID");

                    b.Property<Guid>("CompanyUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CompanyUserID");

                    b.Property<Guid>("JobProviderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobProviderID");

                    b.Property<Guid>("JobSeekerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobSeekerID");

                    b.Property<int>("ShortListStatus")
                        .HasColumnType("int");

                    b.HasKey("ShortListId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("CompanyUserId");

                    b.HasIndex("JobProviderId");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("ShortList", (string)null);
                });

            modelBuilder.Entity("Domain.Models.SignUpRequest", b =>
                {
                    b.Property<Guid>("SignInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SignInId");

                    b.ToTable("SignUpRequest", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Skill", b =>
                {
                    b.Property<Guid>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SkillID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SkillId");

                    b.ToTable("Skill", (string)null);
                });

            modelBuilder.Entity("Domain.Models.WorkExperience", b =>
                {
                    b.Property<Guid>("WorkExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WorkExperienceID");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobSeekerProfileId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobSeekerProfileID");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ServiceEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ServiceStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkExperienceId");

                    b.HasIndex("JobSeekerProfileId");

                    b.ToTable("WorkExperience", (string)null);
                });

            modelBuilder.Entity("JobProviderCompany", b =>
                {
                    b.Property<Guid>("JobProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("JobProviderID");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("IndustryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid>("SystemUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobProviderId");

                    b.HasIndex("SystemUserId");

                    b.ToTable("JobProviderCompany", (string)null);
                });

            modelBuilder.Entity("SystemUser", b =>
                {
                    b.Property<Guid>("SystemUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SystemUserID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemUserId");

                    b.ToTable("SystemUser", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Models.AuthUser", b =>
                {
                    b.HasBaseType("SystemUser");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("AuthUser", (string)null);
                });

            modelBuilder.Entity("CompanyUser", b =>
                {
                    b.HasOne("JobProviderCompany", "JobProviderNavigation")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("JobProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SystemUser", "CompanyUserNavigation")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyUserNavigation");

                    b.Navigation("JobProviderNavigation");
                });

            modelBuilder.Entity("Domain.Models.Interview", b =>
                {
                    b.HasOne("Domain.Models.JobApplication", "JobApplication")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobApplication");
                });

            modelBuilder.Entity("Domain.Models.JobApplication", b =>
                {
                    b.HasOne("Domain.Models.JobPost", "JobPost")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.JobSeeker", "JobSeeker")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.Resume", "Resume")
                        .WithMany("JobApplications")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("JobSeeker");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Domain.Models.JobPost", b =>
                {
                    b.HasOne("JobProviderCompany", "JobProviderCompany")
                        .WithMany("JobPosts")
                        .HasForeignKey("JobProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CompanyUser", "PostedByUser")
                        .WithMany("JobPosts")
                        .HasForeignKey("PostedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobProviderCompany");

                    b.Navigation("PostedByUser");
                });

            modelBuilder.Entity("Domain.Models.JobSeeker", b =>
                {
                    b.HasOne("SystemUser", "JobSeekerNavigation")
                        .WithOne("JobSeeker")
                        .HasForeignKey("Domain.Models.JobSeeker", "JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobSeekerNavigation");
                });

            modelBuilder.Entity("Domain.Models.JobSeekerProfile", b =>
                {
                    b.HasOne("Domain.Models.JobSeeker", "JobSeeker")
                        .WithMany("JobSeekerProfiles")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Resume", "Resume")
                        .WithMany("JobSeekerProfiles")
                        .HasForeignKey("ResumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobSeeker");

                    b.Navigation("Resume");
                });

            modelBuilder.Entity("Domain.Models.JobSeekerProfileSkill", b =>
                {
                    b.HasOne("Domain.Models.JobSeekerProfile", "JobSeekerProfile")
                        .WithMany("JobSeekerProfileSkills")
                        .HasForeignKey("JobSeekerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Skill", "Skill")
                        .WithMany("JobSeekerProfileSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobSeekerProfile");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Domain.Models.Qualification", b =>
                {
                    b.HasOne("Domain.Models.JobSeekerProfile", "JobseekerProfile")
                        .WithMany("Qualifications")
                        .HasForeignKey("JobseekerProfileId");

                    b.Navigation("JobseekerProfile");
                });

            modelBuilder.Entity("Domain.Models.SavedJob", b =>
                {
                    b.HasOne("Domain.Models.JobPost", "JobPost")
                        .WithMany("SavedJobs")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.JobSeeker", "JobSeeker")
                        .WithMany("SavedJobs")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("Domain.Models.ShortList", b =>
                {
                    b.HasOne("Domain.Models.JobApplication", "JobApplication")
                        .WithMany("ShortLists")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CompanyUser", "CompanyUser")
                        .WithMany("ShortLists")
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JobProviderCompany", "JobProvider")
                        .WithMany("ShortLists")
                        .HasForeignKey("JobProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Models.JobSeeker", "JobSeeker")
                        .WithMany("ShortLists")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyUser");

                    b.Navigation("JobApplication");

                    b.Navigation("JobProvider");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("Domain.Models.WorkExperience", b =>
                {
                    b.HasOne("Domain.Models.JobSeekerProfile", "JobSeekerProfile")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("JobSeekerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobSeekerProfile");
                });

            modelBuilder.Entity("JobProviderCompany", b =>
                {
                    b.HasOne("SystemUser", "JobProviderNavigation")
                        .WithMany("JobProviderCompanies")
                        .HasForeignKey("SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobProviderNavigation");
                });

            modelBuilder.Entity("Domain.Models.AuthUser", b =>
                {
                    b.HasOne("SystemUser", null)
                        .WithOne()
                        .HasForeignKey("Domain.Models.AuthUser", "SystemUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyUser", b =>
                {
                    b.Navigation("JobPosts");

                    b.Navigation("ShortLists");
                });

            modelBuilder.Entity("Domain.Models.JobApplication", b =>
                {
                    b.Navigation("ShortLists");
                });

            modelBuilder.Entity("Domain.Models.JobPost", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("SavedJobs");
                });

            modelBuilder.Entity("Domain.Models.JobSeeker", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("JobSeekerProfiles");

                    b.Navigation("SavedJobs");

                    b.Navigation("ShortLists");
                });

            modelBuilder.Entity("Domain.Models.JobSeekerProfile", b =>
                {
                    b.Navigation("JobSeekerProfileSkills");

                    b.Navigation("Qualifications");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("Domain.Models.Resume", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("JobSeekerProfiles");
                });

            modelBuilder.Entity("Domain.Models.Skill", b =>
                {
                    b.Navigation("JobSeekerProfileSkills");
                });

            modelBuilder.Entity("JobProviderCompany", b =>
                {
                    b.Navigation("CompanyUsers");

                    b.Navigation("JobPosts");

                    b.Navigation("ShortLists");
                });

            modelBuilder.Entity("SystemUser", b =>
                {
                    b.Navigation("CompanyUsers");

                    b.Navigation("JobProviderCompanies");

                    b.Navigation("JobSeeker");
                });
#pragma warning restore 612, 618
        }
    }
}
